{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Bridges Knots","text":"<p>This Python module allows you to get data from the WFP Data Bridges API, including household survey data, market prices, exchange rates, GORP (Global Operational Response Plan) data, and food security data (IPC equivalent). It is a wrapper for the Data Bridges API Client, providing an easier way to data analysts to get VAM and monitoring data using their language of choice (Python, R and STATA).</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#using-uv","title":"Using uv","text":"<p>We recommend using <code>uv</code> as package manager. You can install it using the instructions here.</p> <p>Install the <code>data_bridges_knots</code> package in your environment using uv:</p> <pre><code>uv venv .venv &amp;&amp; source .venv/bin/activate &amp;&amp; uv pip install git+https://github.com/WFP-VAM/DataBridgesKnots.git\n</code></pre>"},{"location":"#using-pip","title":"Using pip","text":"<p>You can also install the <code>data_bridges_knots</code> package using regular <code>pip</code> and the Git repository URL:</p> <pre><code>pip3 install --force-reinstall git+https://github.com/WFP-VAM/DataBridgesKnots.git\n</code></pre> <p>STATA and R users will also need the appropriate optional dependencies to use this package in their respective software. To install the package with these dependencies, use the following command:</p>"},{"location":"#stata-users","title":"STATA users","text":"<p>STATA users need to install the <code>data_bridges_knots</code> with additional STATA dependencies (<code>pystata</code>, and <code>stata-setup</code>):</p> <pre><code>uv venv .venv &amp;&amp; source .venv/bin/activate &amp;&amp; uv pip install git+https://github.com/WFP-VAM/DataBridgesKnots.git#egg=data_bridges_knots[STATA]\n</code></pre>"},{"location":"#r-users","title":"R users","text":"<p>R users need to have <code>reticulate</code> installed in their machine to run this package as explained in the examples folder.</p> <pre><code>install.packages(\"reticulate\")\nlibrary(reticulate)\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>There are three ways to configure DataBridgesShapes:</p>"},{"location":"#option-1-yaml-configuration-file-recommended-for-production","title":"Option 1: YAML Configuration File (Recommended for Production)","text":"<ol> <li>Create a <code>data_bridges_api_config.yaml</code> in the main folder you're running your code from.</li> <li> <p>The structure of the file is:</p> <p><pre><code>NAME: ''\nVERSION : ''\nKEY: ''\nSECRET: ''\nDATABRIDGES_API_KEY: ''\nSCOPES:\n- ''\n- ''\n</code></pre> 3. Replace the placeholders with your actual API key and secret from the Data Bridges API. Update the SCOPES list with the required scopes for your use case.</p> </li> </ol>"},{"location":"#option-2-dictionary-configuration-recommended-for-testingprogrammatic-use","title":"Option 2: Dictionary Configuration (Recommended for Testing/Programmatic Use)","text":"<p>You can also initialize the client directly with a Python dictionary:</p> <pre><code>from data_bridges_knots import DataBridgesShapes\n\nconfig = {\n    'KEY': 'your-api-key',\n    'SECRET': 'your-api-secret',\n    'VERSION': '5.0.0',\n    'SCOPES': [\n        'vamdatabridges_household-fulldata_get',\n        'vamdatabridges_marketprices-pricemonthly_get'\n    ],\n    'DATABRIDGES_API_KEY': 'optional-databridges-key'\n}\n\nclient = DataBridgesShapes(config)\n</code></pre>"},{"location":"#option-3-environment-variables-recommended-for-cicd-and-containers","title":"Option 3: Environment Variables (Recommended for CI/CD and Containers)","text":"<p>Set the following environment variables and use the <code>config_from_env()</code> helper:</p> <pre><code>export DATABRIDGES_KEY=\"your-api-key\"\nexport DATABRIDGES_SECRET=\"your-api-secret\"\nexport DATABRIDGES_VERSION=\"5.0.0\"\nexport DATABRIDGES_SCOPES=\"scope1,scope2,scope3\"\nexport DATABRIDGES_API_KEY=\"optional-databridges-key\"\n</code></pre> <p>Then in your Python code:</p> <pre><code>from data_bridges_knots.client import config_from_env, DataBridgesShapes\n\nconfig = config_from_env()\nclient = DataBridgesShapes(config)\n</code></pre>"},{"location":"#getting-credentials","title":"Getting Credentials","text":"<ul> <li>(For WFP users) Credentials and scopes for DataBridges API can be requested by opening a ticket with the TEC Digital Core team. See documentation</li> <li>External users can reach out to wfp.vaminfo@wfp.org for support on getting the API credentials.</li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#api-documentation","title":"API Documentation","text":"<p>Documentation on the API methods can be found here</p>"},{"location":"#python","title":"Python","text":"<p>Run the following example to extract commodity data: <pre><code>from data_bridges_knots import DataBridgesShapes\n\nCONFIG_PATH = r\"data_bridges_api_config.yaml\"\n\nclient = DataBridgesShapes(CONFIG_PATH)\n\n# COMMODITY DATA\ncommodity_units_list = client.get_commodity_units_list(country_code=\"TZA\", commodity_unit_name=\"Kg\", page=1, format='json')\n</code></pre> Additional examples are in the examples folder and in the API Reference document</p>"},{"location":"#r","title":"R","text":"<pre><code>library(reticulate)\n\n# Import the Python module through reticulate\ndata_bridges_knots &lt;- import(\"data_bridges_knots\")\n\n# Point to our virtual environment's Python\nuse_python(\".venv/bin/python\")\n\n# Create client instance\nconfig_path &lt;- \"data_bridges_api_config.yaml\"\nclient &lt;- data_bridges_knots$DataBridgesShapes(config_path)\n\n# COMMODITY DATA\n# Get commodity unit list for Tanzania\ncommodity_units &lt;- client$get_commodity_units_list(\n  country_code = \"TZA\",\n  commodity_unit_name = \"Kg\",\n  page = 1L,\n  format = \"json\"\n)\n</code></pre> <p>Additional examples are in the examples folder.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the AGPL 3.0 License.</p>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes","title":"<code>data_bridges_knots.client.DataBridgesShapes</code>","text":"<p>DataBridgesShapes is a class that provides an interface to interact with the Data Bridges API.</p> <p>This class includes methods for fetching various types of data such as market prices, exchange rates, food security data, commodities, and more. The class can be initialized with either a YAML configuration file or a configuration dictionary, and supports multiple environments.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>str | dict</code> <p>Either: - Path to YAML configuration file (str), or - Configuration dictionary (dict) with required keys: KEY, SECRET, VERSION,   SCOPES, and optionally DATABRIDGES_API_KEY</p> required <code>env</code> <code>str</code> <p>Environment to use ('prod' or 'dev'). Defaults to \"prod\"</p> <code>'prod'</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Initialize with YAML file (traditional method)\n&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; df_prices = client.get_prices(\"KEN\", \"2025-09-01\")\n</code></pre> <pre><code>&gt;&gt;&gt; # Initialize with dictionary (new method)\n&gt;&gt;&gt; config = {\n...     'KEY': 'your-api-key',\n...     'SECRET': 'your-api-secret',\n...     'VERSION': '5.0.0',\n...     'SCOPES': ['vamdatabridges_household-fulldata_get'],\n...     'DATABRIDGES_API_KEY': 'optional-databridges-key'\n... }\n&gt;&gt;&gt; client = DataBridgesShapes(config)\n&gt;&gt;&gt; exchange_rates = client.get_exchange_rates(\"ETH\")\n</code></pre> <pre><code>&gt;&gt;&gt; # Initialize from environment variables\n&gt;&gt;&gt; from data_bridges_knots.client import config_from_env\n&gt;&gt;&gt; config = config_from_env()\n&gt;&gt;&gt; client = DataBridgesShapes(config)\n</code></pre>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_aims_analysis_rounds","title":"<code>get_aims_analysis_rounds(adm0_code)</code>","text":"<p>Download all analysis rounds for AIMS (Asset Impact Monitoring System) data.</p> <p>Parameters:</p> Name Type Description Default <code>adm0_code</code> <code>int</code> <p>The country adm0Code.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <p>The downloaded data as bytes.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_aims_polygon_files","title":"<code>get_aims_polygon_files(adm0_code)</code>","text":"<p>Download polygon files for Landscape Impact Assessment (LIA) assets.</p> <p>Parameters:</p> Name Type Description Default <code>adm0_code</code> <code>int</code> <p>The country adm0Code.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <p>The downloaded polygon files as bytes.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_choice_list","title":"<code>get_choice_list(xls_form_id)</code>","text":"<p>Extracts choice lists from a questionnaire form definition.</p> <p>Parameters:</p> Name Type Description Default <code>xls_form_id</code> <code>int</code> <p>The ID of the questionnaire form to process</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing choice lists with columns: - name: Name of the choice list - value: Choice value/code - label: Human-readable choice label</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; choices = client.get_choice_list(123)\n</code></pre>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_commodities_list","title":"<code>get_commodities_list(country_iso3=None, commodity_name=None, commodity_id=0, page=1, format='json')</code>","text":"<p>Retrieves the detailed list of commodities available in the DataBridges platform.</p> <p>Parameters:</p> Name Type Description Default <code>country_iso3</code> <code>str</code> <p>The code to identify the country. It can be an ISO-3166 Alpha 3 code or the VAM internal admin0code.</p> <code>None</code> <code>commodity_name</code> <code>str</code> <p>The name, even partial and case insensitive, of a commodity.</p> <code>None</code> <code>commodity_id</code> <code>int</code> <p>The exact ID of a commodity. Defaults to 0.</p> <code>0</code> <code>page</code> <code>int</code> <p>Page number for paged results. Defaults to 1.</p> <code>1</code> <code>format</code> <code>str</code> <p>Output format: 'json' or 'csv'. Defaults to 'json'.</p> <code>'json'</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get full list of commmodities\n&gt;&gt;&gt; commodities_list = client.get_commodities_list()\n&gt;&gt;&gt; # Get commodities for Tanzania\n&gt;&gt;&gt; commodities_df = client.get_commodities_list(country_iso3=\"TZA\")\n&gt;&gt;&gt; # Get commodity with name containing \"Maize\"\n&gt;&gt;&gt; maize_df = client.get_commodities_list(commodity_name=\"Maize\")\n&gt;&gt;&gt; # Get commodity with specific ID\n&gt;&gt;&gt; specific_commodity_df = client.get_commodities_list(commodity_id=123)\n</code></pre> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: A DataFrame containing the retrieved commodity data.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_commodity_units_conversion_list","title":"<code>get_commodity_units_conversion_list(country_iso3=None, commodity_id=0, from_unit_id=0, to_unit_id=0, page=1, format='json')</code>","text":"<p>Retrieves conversion factors to Kilogram or Litres for each convertible unit of measure.</p> <p>Parameters:</p> Name Type Description Default <code>country_code</code> <code>str</code> <p>The code to identify the country. It can be an ISO-3166 Alpha 3 code or the VAM internal admin0code.</p> required <code>commodity_id</code> <code>int</code> <p>The exact ID of a Commodity, as found in /Commodities/List. Defaults to 0.</p> <code>0</code> <code>from_unit_id</code> <code>int</code> <p>The exact ID of the original unit of measure of the price of a commodity. Defaults to 0.</p> <code>0</code> <code>to_unit_id</code> <code>int</code> <p>The exact ID of the converted unit of measure of the price of a commodity. Defaults to 0.</p> <code>0</code> <code>page</code> <code>int</code> <p>Page number for paged results. Defaults to 1.</p> <code>1</code> <code>format</code> <code>str</code> <p>Output format: 'json' or 'csv'. Defaults to 'json'.</p> <code>'json'</code> <p>Examples:</p> <p>client = DataBridgesShapes(\"data_bridges_api_config.yaml\")</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: A DataFrame containing the retrieved conversion factors.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_commodity_units_conversion_list--get-full-list-of-commodity-units-conversions","title":"Get full list of commodity units conversions","text":"<p>full_list = client.get_commodity_units_conversion_list()</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_commodity_units_conversion_list--get-conversion-factors-for-tanzania","title":"Get conversion factors for Tanzania","text":"<p>conversion_factors_df = client.get_commodity_units_conversion_list(country_iso3=\"TZA\")</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_commodity_units_list","title":"<code>get_commodity_units_list(country_iso3=None, commodity_unit_name=None, commodity_unit_id=0, page=1, format='json')</code>","text":"<p>Retrieves the detailed list of the unit of measure available in DataBridges platform.</p> <p>Parameters:</p> Name Type Description Default <code>country_iso3</code> <code>str</code> <p>The code to identify the country. It can be an ISO-3166 Alpha 3 code or the VAM internal admin0code.</p> <code>None</code> <code>commodity_unit_name</code> <code>str</code> <p>The name, even partial and case insensitive, of a commodity unit.</p> <code>None</code> <code>commodity_unit_id</code> <code>int</code> <p>The exact ID of a commodity unit. Defaults to 0.</p> <code>0</code> <code>page</code> <code>int</code> <p>Page number for paged results. Defaults to 1.</p> <code>1</code> <code>format</code> <code>str</code> <p>Output format: 'json' or 'csv'. Defaults to 'json'.</p> <code>'json'</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get commodity units for Tanzania\n&gt;&gt;&gt; units_df = client.get_commodity_units_list(country_iso3=\"TZA\")\n&gt;&gt;&gt; # Get commodity unit with name containing \"Kg\"\n&gt;&gt;&gt; kg_unit_df = client.get_commodity_units_list(commodity_unit_name=\"Kg\")\n&gt;&gt;&gt; # Get commodity unit with specific ID\n&gt;&gt;&gt; specific_unit_df = client.get_commodity_units_list(commodity_unit_id=5)\n</code></pre> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the retrieved commodity units data.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_currency_list","title":"<code>get_currency_list(country_iso3=None, currency_name=None, currency_id=0, page=1, format='json')</code>","text":"<p>Returns the list of currencies available in the internal VAM database, with Currency 3-letter code, matching with ISO 4217.</p> <p>Parameters:</p> Name Type Description Default <code>country_iso3</code> <code>str</code> <p>The code to identify the country. It can be an ISO-3166 Alpha 3 code or the VAM internal admin0code.</p> <code>None</code> <code>currency_name</code> <code>str</code> <p>Currency 3-letter code, matching with ISO 4217.</p> <code>None</code> <code>currency_id</code> <code>int</code> <p>Unique code to identify the currency in internal VAM currencies. Defaults to 0.</p> <code>0</code> <code>page</code> <code>int</code> <p>Page number for paged results. Defaults to 1.</p> <code>1</code> <code>format</code> <code>str</code> <p>Output format: 'json' or 'csv'. Defaults to 'json'.</p> <code>'json'</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get currencies for Tanzania\n&gt;&gt;&gt; currencies_df = client.get_currency_list(country_iso3=\"TZA\")\n&gt;&gt;&gt; # Get currency with name \"ETB\"\n&gt;&gt;&gt; etb_df = client.get_currency_list(currency_name=\"ETB\")\n&gt;&gt;&gt; # Get currency with specific ID\n&gt;&gt;&gt; specific_currency_df = client.get_currency_list(currency_id=1)\n</code></pre> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the retrieved currency data.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_economic_indicator_list","title":"<code>get_economic_indicator_list(page=1, indicator_name='', country_iso3='', format='json')</code>","text":"<p>Returns the lists of indicators for which Vulnerability Analysis and Mapping - Economic and Market Analysis Unit has redistribution licensing from Trading Economics.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page number for paged results. Defaults to 1.</p> <code>1</code> <code>indicator_name</code> <code>str</code> <p>Unique indicator name. Defaults to ''.</p> <code>''</code> <code>iso3</code> <code>str</code> <p>The code to identify the country. Must be a ISO-3166 Alpha 3 code. Defaults to ''.</p> required <code>format</code> <code>str</code> <p>Output format: 'json' or 'csv'. Defaults to 'json'.</p> <code>'json'</code> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the retrieved economic indicator data.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_exchange_rates","title":"<code>get_exchange_rates(country_iso3, page_size=1000)</code>","text":"<p>Retrieves exchange rates for a given country from the Data Bridges API.</p> <p>Parameters:</p> Name Type Description Default <code>country_iso3</code> <code>str</code> <p>The ISO3 country code</p> required <code>page_size</code> <code>int</code> <p>Number of items per page. Defaults to 1000</p> <code>1000</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing exchange rate data with columns: - date: Date of exchange rate - rate: Exchange rate value - currency: Currency code And other relevant exchange rate information</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get exchange rates for Ethiopia\n&gt;&gt;&gt; rates_df = client.get_exchange_rates(\"ETH\")\n&gt;&gt;&gt; # Check latest exchange rate\n&gt;&gt;&gt; latest_rate = rates_df.sort_values('date').iloc[-1]\n</code></pre> <p>Raises:</p> Type Description <code>ApiException</code> <p>If there's an error calling the Exchange rates API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_food_security_list","title":"<code>get_food_security_list(iso3=None, year=None, page=1)</code>","text":"<p>Retrieves food security data from IPC and equivalent data sources</p> <p>Parameters:</p> Name Type Description Default <code>iso3</code> <code>str</code> <p>The country ISO3 code</p> <code>None</code> <code>year</code> <code>int</code> <p>The year to retrieve data for</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number for paged results. Defaults to 1</p> <code>1</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing food security data with relevant indicators and metrics for the specified country and year</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get food security data for Ethiopia in 2023\n&gt;&gt;&gt; eth_food_security = client.get_food_security_list(\"ETH\", 2025)\n&gt;&gt;&gt; # Get all food security data\n&gt;&gt;&gt; all_food_security = client.get_food_security_list()\n</code></pre> <p>Raises:</p> Type Description <code>ApiException</code> <p>If there's an error calling the Food Security API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_gorp","title":"<code>get_gorp(data_type, page=None)</code>","text":"<p>Retrieves data from the Global Operational Response Plan (GORP) API.</p> <p>The GORP API provides access to WFP's operational response planning data at different geographical levels.</p> <p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>str</code> <p>The type of GORP data to retrieve. Must be one of: - 'country_latest': Latest data at country level - 'global_latest': Latest global aggregated data - 'regional_latest': Latest data aggregated by region</p> required <code>page</code> <code>int</code> <p>Page number for paginated results. Required for 'latest' and 'list' data types. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing data from the Global Operational Response Plan (GORP)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get latest country-level data\n&gt;&gt;&gt; country_data = client.get_gorp(\"country_latest\")\n&gt;&gt;&gt; # Get global summary\n&gt;&gt;&gt; global_data = client.get_gorp(\"global_latest\")\n&gt;&gt;&gt; # Get regional breakdown\n&gt;&gt;&gt; regional_data = client.get_gorp(\"regional_latest\")\n</code></pre> <p>Raises:</p> Type Description <code>ValueError</code> <p>If data_type is not one of the allowed values</p> <code>ApiException</code> <p>If there's an error accessing the GORP API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_household_questionnaire","title":"<code>get_household_questionnaire(xls_form_id)</code>","text":"<p>Extracts the questionnaire structure from an XLS Form definition.</p> <p>Parameters:</p> Name Type Description Default <code>xls_form_id</code> <code>int</code> <p>The ID of the questionnaire form to process</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the questionnaire structure with one row per field in the form</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; questionnaire = client.get_household_questionnaire(2075)\n</code></pre>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_household_survey","title":"<code>get_household_survey(survey_id, access_type, page_size=600)</code>","text":"<p>Retrieves household survey data using the specified access type.</p> <p>Parameters:</p> Name Type Description Default <code>survey_id</code> <code>int]</code> <p>The ID of the survey to retrieve</p> required <code>access_type</code> <code>str</code> <p>The type of access to use. Must be one of: - 'draft': Draft internal base data (requires API key) - 'full': Complete survey data (requires API key). Data is returned as inserted by the country office and it might contain PII and unstandardized fields.</p> <ul> <li>'official': Official use base data. Only data mapped against the standards is returned.</li> <li>'public': Public base data</li> </ul> required <code>page_size</code> <code>int</code> <p>Number of items per page. Defaults to 600</p> <code>600</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing survey data with columns specific to the access type and survey structure</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get full, unmapped survey data\n&gt;&gt;&gt; full_data = client.get_household_survey(3094, \"full\")\n&gt;&gt;&gt; # Get standard data for official use (no PII)\n&gt;&gt;&gt; official_data = client.get_household_survey(3094, \"official\")\n</code></pre> <p>Raises:</p> Type Description <code>KeyError</code> <p>If access_type is not one of the allowed values</p> <code>ApiException</code> <p>If there's an error accessing the API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_household_surveys_list","title":"<code>get_household_surveys_list(country_iso3=None, page=1, start_date=None, end_date=None, survey_id=None)</code>","text":"<p>Retrieves a list of household surveys for a country with their metadata.</p> <p>Parameters:</p> Name Type Description Default <code>country_iso3</code> <code>str</code> <p>ISO3 Country code</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number for paginated results. Defaults to 1</p> <code>1</code> <code>start_date</code> <code>str</code> <p>Start date filter in ISO format (YYYY-MM-DD)</p> <code>None</code> <code>end_date</code> <code>str</code> <p>End date filter in ISO format (YYYY-MM-DD)</p> <code>None</code> <code>survey_id</code> <code>int</code> <p>Specific survey ID to retrieve</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing survey metadata with columns: - survey_id: Unique identifier for the survey - xls_form_id: ID of the questionnaire form used - title: Survey title - country: Country name - start_date: Survey start date - end_date: Survey end date And other metadata fields</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get all surveys for a country\n&gt;&gt;&gt; surveys = client.get_household_surveys_list(country_iso3=\"COG\")\n&gt;&gt;&gt; # Get surveys within date range\n&gt;&gt;&gt; surveys = client.get_household_surveys_list(\n...     country_iso3=\"COG\",\n...     start_date=\"2024-01-01\",\n...     end_date=\"2024-12-31\"\n... )\n</code></pre> <p>Raises:</p> Type Description <code>ApiException</code> <p>If there's an error accessing the API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_household_xslform_definition","title":"<code>get_household_xslform_definition(xls_form_id)</code>","text":"<p>Retrieves the complete XLS Form definition for a questionnaire.</p> <p>Parameters:</p> Name Type Description Default <code>xls_form_id</code> <code>int</code> <p>The ID of the questionnaire form to retrieve</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the form definition with columns: - fields: List of field definitions - choices: Available choices for select questions - settings: Form settings And other form structure information</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get form definition\n&gt;&gt;&gt; form_def = client.get_household_xslform_definition(2067)\n&gt;&gt;&gt; # Access form fields\n&gt;&gt;&gt; fields = form_def['fields'].iloc[0]\n</code></pre> <p>Raises:</p> Type Description <code>ApiException</code> <p>If there's an error accessing the API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_markets_as_csv","title":"<code>get_markets_as_csv(country_iso3=None, local_names=False)</code>","text":"<p>Retrieves a complete list of markets in a country in CSV format.</p> <p>Parameters:</p> Name Type Description Default <code>country_iso3</code> <code>str</code> <p>Country administrative code. Defaults to None.</p> <code>None</code> <code>local_names</code> <code>bool</code> <p>If True, market and region names will be localized if available. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>CSV formatted string containing market data</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get markets CSV for Afghanistan\n&gt;&gt;&gt; markets_csv = client.get_markets_as_csv(\"AFG\")\n&gt;&gt;&gt; # Get localized market names\n&gt;&gt;&gt; local_markets = client.get_markets_as_csv(\"AFG\", local_names=True)\n</code></pre> <p>Raises:</p> Type Description <code>ApiException</code> <p>If there's an error accessing the Markets API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_markets_list","title":"<code>get_markets_list(country_iso3=None, page=1)</code>","text":"<p>Retrieves a complete list of markets in a country.</p> <p>Parameters:</p> Name Type Description Default <code>country_code</code> <code>str</code> <p>The ISO3 code to identify the country. Defaults to None.</p> required <code>page</code> <code>int</code> <p>Page number for paginated results. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing market information with columns: - market_id: Unique identifier for the market - market_name: Name of the market - adm0_code: Country administrative code - latitude: Market location latitude - longitude: Market location longitude And other market-related fields</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get markets for Afghanistan\n&gt;&gt;&gt; afg_markets = client.get_markets_list(\"AFG\")\n</code></pre> <p>Raises:</p> Type Description <code>ApiException</code> <p>If there's an error accessing the Markets API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_mfi_surveys","title":"<code>get_mfi_surveys(adm0_code=0, page=1, start_date=None, end_date=None)</code>","text":"<p>Retrieve Survey IDs, their corresponding XLS Form IDs, and Base XLS Form of all MFI surveys conducted in a country.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_mfi_surveys_base_data","title":"<code>get_mfi_surveys_base_data(survey_id=None, page=1, page_size=20)</code>","text":"<p>Get data that includes the core Market Functionality Index (MFI) fields only by Survey ID.</p> <p>Parameters:</p> Name Type Description Default <code>survey_id</code> <code>int</code> <p>Unique identifier for the collected data</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number for paged results</p> <code>1</code> <code>page_size</code> <code>int</code> <p>Number of items per page</p> <code>20</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get MFI base data for a specific survey\n&gt;&gt;&gt; base_data = client.get_mfi_surveys_base_data(survey_id=123)\n</code></pre> <p>Returns:</p> Type Description <p>pandas.DataFrame: DataFrame containing MFI base survey data</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_mfi_surveys_full_data","title":"<code>get_mfi_surveys_full_data(survey_id=None, page=1, page_size=20)</code>","text":"<p>Get a full dataset that includes all the fields included in the survey in addition to the core Market Functionality Index (MFI) fields by Survey ID.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_mfi_surveys_processed_data","title":"<code>get_mfi_surveys_processed_data(survey_id=None, page=1, page_size=20, format='json', start_date=None, end_date=None, adm0_codes=None, market_id=None, survey_type=None)</code>","text":"<p>Get MFI processed data in long format.</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_mfi_xls_forms_detailed","title":"<code>get_mfi_xls_forms_detailed(adm0_code=0, page=1, start_date=None, end_date=None)</code>","text":"<p>Get a complete list of XLS Forms uploaded on the MFI Data Bridge in a given period of data collection.</p> <p>Parameters:</p> Name Type Description Default <code>adm0_code</code> <code>int</code> <p>Code for the country. Defaults to 0.</p> <code>0</code> <code>page</code> <code>int</code> <p>Page number for paged results. Defaults to 1.</p> <code>1</code> <code>start_date</code> <code>str</code> <p>Starting date for data collection range (YYYY-MM-DD format)</p> <code>None</code> <code>end_date</code> <code>str</code> <p>Ending date for data collection range (YYYY-MM-DD format)</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get detailed XLS forms for country code 231\n&gt;&gt;&gt; detailed_forms = client.get_mfi_xls_forms_detailed(adm0_code=231)\n&gt;&gt;&gt; # Get forms within a date range\n&gt;&gt;&gt; forms_in_range = client.get_mfi_xls_forms_detailed(\n...     adm0_code=231,\n...     start_date=\"2023-01-01\",\n...     end_date=\"2023-12-31\"\n... )\n</code></pre> <p>Returns:</p> Type Description <p>pandas.DataFrame: DataFrame containing XLS Forms data</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_nearby_markets","title":"<code>get_nearby_markets(country_iso3=None, lat=None, lng=None)</code>","text":"<p>Finds markets near a given location within a 15km distance.</p> <p>Parameters:</p> Name Type Description Default <code>country_iso3</code> <code>str</code> <p>Country administrative code. Defaults to None.</p> <code>None</code> <code>lat</code> <code>float</code> <p>Latitude of the search point. Defaults to None.</p> <code>None</code> <code>lng</code> <code>float</code> <p>Longitude of the search point. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing nearby markets with columns: - market_id: Unique identifier for the market - market_name: Name of the market - distance: Distance from search point in kilometers - latitude: Market location latitude - longitude: Market location longitude And other market-related fields</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Find markets near coordinates in Afghanistan\n&gt;&gt;&gt; nearby = client.get_nearby_markets(\"AFG\", 34.515, 69.208)\n&gt;&gt;&gt; # Sort markets by distance\n&gt;&gt;&gt; closest = nearby.sort_values('distance').iloc[0]\n</code></pre> <p>Raises:</p> Type Description <code>ApiException</code> <p>If there's an error accessing the Markets API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_prices","title":"<code>get_prices(country_iso3, survey_date=None, page_size=1000)</code>","text":"<p>Fetches market price data for a given country and survey date.</p> <p>Args: country_iso3 (str): The ISO 3-letter country code survey_date (str, optional): The survey date in ISO format (e.g. '2022-01-01').     If None, fetches data from the last 12 months. Defaults to None. page_size (int, optional): Number of items per page. Defaults to 1000</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing market price data with columns: - date: Date of price recording - price: Price value - commodity_id: ID of the commodity - market_id: ID of the market And other relevant price information</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get prices for last 12 months\n&gt;&gt;&gt; df_prices = client.get_prices(\"KEN\")\n&gt;&gt;&gt; # Get prices from specific date\n&gt;&gt;&gt; df_date_prices = client.get_prices(\"KEN\", \"2025-09-01\")\n</code></pre> <p>Raises:</p> Type Description <code>ApiException</code> <p>If there's an error calling the Market price API</p>"},{"location":"reference/#data_bridges_knots.client.DataBridgesShapes.get_usd_indirect_quotation","title":"<code>get_usd_indirect_quotation(country_iso3='', currency_name='', page=1, format='json')</code>","text":"<p>Returns the value of the Exchange rates from Trading Economics, for official rates, and DataViz for unofficial rates.</p> <p>Parameters:</p> Name Type Description Default <code>country_iso3</code> <code>str</code> <p>The code to identify the country. Must be a ISO-3166 Alpha 3 code. Defaults to ''.</p> <code>''</code> <code>currency_name</code> <code>str</code> <p>The ISO3 code for the currency, based on ISO4217. Defaults to ''.</p> <code>''</code> <code>page</code> <code>int</code> <p>Page number for paged results. Defaults to 1.</p> <code>1</code> <code>format</code> <code>str</code> <p>Output format: 'json' or 'csv'. Defaults to 'json'.</p> <code>'json'</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = DataBridgesShapes(\"data_bridges_api_config.yaml\")\n&gt;&gt;&gt; # Get USD indirect quotation for Ethiopia\n&gt;&gt;&gt; usd_df = client.get_usd_indirect_quotation(country_iso3=\"ETH\")\n&gt;&gt;&gt; # Get USD indirect quotation for currency \"ETB\"\n&gt;&gt;&gt; etb_usd_df = client.get_usd_indirect_quotation(currency_name=\"ETB\")\n</code></pre> <p>Returns:</p> Type Description <p>pandas.DataFrame: A DataFrame containing the retrieved exchange rate data.</p>"}]}